return {
  {
    'hrsh7th/nvim-cmp',
    event = 'InsertEnter',
    dependencies = {
      -- Snippet Engine & its associated nvim-cmp source
      {
        'L3MON4D3/LuaSnip',
        build = (function()
          -- Build Step is needed for regex support in snippets.
          -- This step is not supported in many windows environments.
          -- Remove the below condition to re-enable on windows.
          if vim.fn.has 'win32' == 1 or vim.fn.executable 'make' == 0 then
            return
          end
          return 'make install_jsregexp'
        end)(),
        dependencies = {
          -- -- `friendly-snippets` contains a variety of premade snippets.
          -- --    See the README about individual language/framework/plugin snippets:
          -- --    https://github.com/rafamadriz/friendly-snippets
          -- {
          --   'rafamadriz/friendly-snippets',
          --   config = function()
          --     require('luasnip.loaders.from_vscode').lazy_load()
          --   end,
          -- },
        },
      },
      'saadparwaiz1/cmp_luasnip',

      -- Adds other completion capabilities.
      --  nvim-cmp does not ship with all sources by default. They are split
      --  into multiple repos for maintenance purposes.
      'hrsh7th/cmp-nvim-lsp',
      'hrsh7th/cmp-path',
    },
    config = function()
      -- See `:help cmp`
      local cmp = require 'cmp'
      local luasnip = require 'luasnip'
      luasnip.config.setup {}

      cmp.setup {
        snippet = {
          expand = function(args)
            luasnip.lsp_expand(args.body)
          end,
        },
        -- completion = { completeopt = 'menu,menuone,noinsert' },

        -- https://github.com/hrsh7th/nvim-cmp/pull/472
        -- really comprehensive: https://github.com/hrsh7th/nvim-cmp/wiki/Menu-Appearance

        -- [[ AESTHETIC WINDOWS ]] {{
        window = {
          completion = cmp.config.window.bordered(),
          documentation = cmp.config.window.bordered(),
          -- completion = { -- rounded border; thin-style scrollbar
          --   -- border = 'rounded',
          --   -- -- scrollbar = '║',
          --   -- scrollbar = true,
          -- },
          -- documentation = { -- no border; native-style scrollbar
          --   -- border = nil,
          --   border = 'rounded',
          --   scrollbar = '║',
          --   -- other options
          -- },
        },

        -- This has ligher window frames
        -- window = {
        --   completion = {
        --     border = {
        --       { '╭', 'Comment' },
        --       { '─', 'Comment' },
        --       { '╮', 'Comment' },
        --       { '│', 'Comment' },
        --       { '╯', 'Comment' },
        --       { '─', 'Comment' },
        --       { '╰', 'Comment' },
        --       { '│', 'Comment' },
        --     },
        --   },
        --   documentation = {
        --     border = {
        --       { '╭', 'Comment' },
        --       { '─', 'Comment' },
        --       { '╮', 'Comment' },
        --       { '│', 'Comment' },
        --       { '╯', 'Comment' },
        --       { '─', 'Comment' },
        --       { '╰', 'Comment' },
        --       { '│', 'Comment' },
        --     },
        --   },
        -- },
        -- }}

        -- TODO: only if you ever hate your borders {{
        -- https://www.reddit.com/r/neovim/comments/16qcncm/how_do_you_put_borders_on_this_lsp_preview_ive/
        -- NOTE: just to have it
        -- specify what border looks like
        -- local border = {
        --   { '┌', 'FloatBorder' },
        --   { '─', 'FloatBorder' },
        --   { '┐', 'FloatBorder' },
        --   { '│', 'FloatBorder' },
        --   { '┘', 'FloatBorder' },
        --   { '─', 'FloatBorder' },
        --   { '└', 'FloatBorder' },
        --   { '│', 'FloatBorder' },
        -- }

        -- -- Add the border on hover and on signature help popup window
        -- local handlers = {
        --   ['textDocument/hover'] = vim.lsp.with(vim.lsp.handlers.hover, { border = border }),
        --   ['textDocument/signatureHelp'] = vim.lsp.with(vim.lsp.handlers.signature_help, { border = border }),
        -- }

        -- -- Add border to the diagnostic popup window
        -- vim.diagnostic.config({
        --   virtual_text = {
        --     prefix = '■ ', -- Could be '●', '▎', 'x', '■', , 
        --   },
        --   float = { border = border },
        -- })

        -- -- Add the border (handlers) to the lua language server
        -- lspconfig.lua_ls.setup({
        --   handlers = handlers,
        --   -- The rest of the server configuration
        -- })

        -- -- Add the border (handlers) to the pyright server
        -- lspconfig.pyright.setup({
        --   handlers = handlers,
        -- })
        -- }}

        -- For an understanding of why these mappings were
        -- chosen, you will need to read `:help ins-completion`
        mapping = cmp.mapping.preset.insert {
          ['<C-n>'] = cmp.mapping.select_next_item(),
          ['<C-p>'] = cmp.mapping.select_prev_item(),
          --  This will also (1) auto-import if the LSP supports it, and (2) expand snippets if the LSP sent a snippet.
          ['<C-y>'] = cmp.mapping.confirm { select = true },
          -- This means "go to next thing in the snippet", whether that be expanding (accepting a suggestion) or go to the next field in a snippet.
          ['<C-j>'] = cmp.mapping(function()
            if luasnip.expand_or_locally_jumpable() then
              luasnip.expand_or_jump()
            end
          end, { 'i', 's' }),
          ['<C-k>'] = cmp.mapping(function()
            if luasnip.locally_jumpable(-1) then
              luasnip.jump(-1)
            end
          end, { 'i', 's' }),
          ['<C-o>'] = cmp.mapping(function()
            if luasnip.choice_active() then
              luasnip.change_choice(1)
            end
          end, { 'i', 's' }),
          vim.keymap.set('n', '<leader><leader>s', '<cmd>source ~/.config/nvim/snippets/go.lua<CR>'),

          -- For more advanced Luasnip keymaps (e.g. selecting choice nodes, expansion) see:
          --    https://github.com/L3MON4D3/LuaSnip?tab=readme-ov-file#keymaps
        },
        -- dependencies
        sources = {
          {
            name = 'lazydev',
            -- set group index to 0 to skip loading LuaLS completions as lazydev recommends it
            group_index = 0,
          },
          { name = 'nvim_lsp_signature_help', priority = 900 }, -- hovering lsp signatures as you type
          { name = 'nvim_lsp', priority = 900 },
          { name = 'path' },
          { name = 'luasnip', priority = 1000 }, -- includes my custom snippets
        },
      }
    end,
  },
}
-- vim: ts=2 sts=2 sw=2 et
